## GitHub Actions workflow 이름
#name: test CI/CD
#
## Workflow 실행조건
#on:
#  push:
#    branches:
#      - develop
#      - feature/*
#
#
## fastapi.yml (Django CI)workflow 에서 실행할 Job(작업) 정의
#jobs:
#  # job 1(build) -> job 2(run)
#
#
#  build: # job 1
#
#    # job 실행 환경 (최신 ubuntu)
#    runs-on: ubuntu-latest
#
#    strategy:
#      max-parallel: 4 # 동시 실행될 최대 Job 수
#      matrix: # 각 Job에 전달될 매트릭스 변수 설정
#        python-version: [3.9]
#
#    steps:
#    # Job 수행 단계별 작업
#
#    # actions/checkout 액션 사용(GitHub제공), 소스코드 체크아웃(@v3 == 액션 버전)
#    - uses: actions/checkout@v3
#
#    # Python 버전 설정 step
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v3
#      with:
#        python-version: ${{ matrix.python-version }}
#
#    # Docker Image 빌드 step
#    - name: Build docker image
#      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kingwangjjang-be:test .
#
#
#    # Docker Hub 로그인 step
#    - name: Login docker hub
#      uses: docker/login-action@master
#      with:
#        username: ${{ secrets.DOCKERHUB_USERNAME }}
#        password: ${{ secrets.DOCKERHUB_TOKEN }}
#      # docker/login-action 사용(GitHub제공) 도커허브 로그인
#      # github actions secrets 민감정보 사용
#
#    # Docker Hub 퍼블리시 step
#    - name: Publish to docker hub
#      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/kingwangjjang-be:test
#
#
#
#  run: # job 2
#    # WAS 인스턴스에 접속, Docker 이미지 pull, run하는 Job
#
#    needs: build # build job이 성공적으로 실행되야 실행
#    runs-on: ubuntu-latest
#    strategy:
#      max-parallel: 4
#      matrix:
#        python-version: [3.9]
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v2
#    - name: Create .env file
#      run: |
#        echo "BE_DEV_VERSION=${{ secrets.BE_DEV_VERSION }}" >> .env
#        echo "CHATGPT_API_KEY=${{ secrets.CHATGPT_API_KEY }}" >> .env
#        echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
#        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
#        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
#        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
#        echo "FTP_HOST=${{ secrets.FTP_HOST }}" >> .env
#        echo "FTP_PASSWORD=${{ secrets.FTP_PASSWORD }}" >> .env
#        echo "FTP_USER=${{ secrets.FTP_USER }}" >> .env
#        echo "FTP_USERNAME=${{ secrets.FTP_USERNAME }}" >> .env
#        echo "SERVER_RUN_MODE=${{ secrets.SERVER_RUN_MODE }}" >> .env
#        echo "WEBHOOK_URL=${{ secrets.TEST_WEBHOOK_URL }}" >> .env
#        echo "TS_OAUTH_CLIENT_ID=${{ secrets.TS_OAUTH_CLIENT_ID }}" >> .env
#        echo "TS_OAUTH_SECRET=${{ secrets.TS_OAUTH_SECRET }}" >> .env
#        echo "WAS_HOST=${{ secrets.WAS_HOST }}" >> .env
#        echo "WAS_PASSWORD=${{ secrets.WAS_PASSWORD }}" >> .env
#        echo "WAS_USERNAME=${{ secrets.WAS_USERNAME }}" >> .env
#    #tailscale 로그인
#    - name: Tailscale
#      uses: tailscale/github-action@v2
#      with:
#        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#        tags: tag:cicd
#    # WAS 인스턴스 접속 & 애플리케이션 실행 step
#    - name: test-docker-compose upload
#      uses: appleboy/scp-action@v0.1.7
#      with:
#        host: ${{ secrets.TESTSV_HOST }}
#        username: ${{ secrets.TESTSV_USERNAME }}
#        port: ${{ secrets.TESTSV_SSH_PORT }}
#        key: ${{ secrets.TESTSV_KEY }}
#        source: "test-docker-compose.yml,.env"
#        target: "/home/kingwangjjang/"
#        overwrite : true
#    - name: Connect to WAS & Execute Application
#      uses: appleboy/ssh-action@master # GitHub제공 액션 사용, ssh로 인스턴스 접속
#      with:
#        host: ${{ secrets.TESTSV_HOST }}
#        username: ${{ secrets.TESTSV_USERNAME }}
#        key: ${{secrets.TESTSV_KEY}}
#        port: ${{ secrets.TESTSV_SSH_PORT }}
#        script: | # 인스턴스 접속후 실행할 스크립트
#          sudo docker version
#          sudo rm docker-compose.yml
#          sudo mv test-docker-compose.yml docker-compose.yml
#          sudo docker stop $(sudo docker ps -aq)
#          sudo docker rm -f $(sudo docker ps -a -q) || true
#          sudo docker rmi -f $(sudo docker images -q) || true
#          sudo docker-compose up -d