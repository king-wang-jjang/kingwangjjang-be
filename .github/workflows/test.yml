# GitHub Actions workflow 이름
name: test CI/CD

# Workflow 실행조건
on:
  push:
    branches:
      - develop
      - feature/*


# fastapi.yml (Django CI)workflow 에서 실행할 Job(작업) 정의
jobs: 
  # job 1(build) -> job 2(run)


  build: # job 1

    # job 실행 환경 (최신 ubuntu)
    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4 # 동시 실행될 최대 Job 수
      matrix: # 각 Job에 전달될 매트릭스 변수 설정
        python-version: [3.9]

    steps:
    # Job 수행 단계별 작업

    # actions/checkout 액션 사용(GitHub제공), 소스코드 체크아웃(@v3 == 액션 버전)
    - uses: actions/checkout@v3 

    # Python 버전 설정 step
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
   
    # Docker Image 빌드 step
    - name: Build docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME_JS }}/kingwangjjang-be:test ./kingwangjjang
      

    # Docker Hub 로그인 step
    - name: Login docker hub
      uses: docker/login-action@master
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME_JS }}
        password: ${{ secrets.DOCKERHUB_PASSWD_JS }} 
      # docker/login-action 사용(GitHub제공) 도커허브 로그인
      # github actions secrets 민감정보 사용

    # Docker Hub 퍼블리시 step
    - name: Publish to docker hub 
      run: docker push ${{ secrets.DOCKERHUB_USERNAME_JS }}/kingwangjjang-be:test



  run: # job 2
    # WAS 인스턴스에 접속, Docker 이미지 pull, run하는 Job
    
    needs: build # build job이 성공적으로 실행되야 실행
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
        
    steps:
    #tailscale 로그인
    - name: Tailscale
      uses: tailscale/github-action@v2
      with:
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        tags: tag:kingwangjjang
    # WAS 인스턴스 접속 & 애플리케이션 실행 step
    - name: Connect to WAS & Execute Application
      uses: appleboy/ssh-action@master # GitHub제공 액션 사용, ssh로 인스턴스 접속
      with:
        host: ${{ secrets.TESTSV_HOST }}
        username: ${{ secrets.TESTSV_USERNAME }}
        key: ${{secrets.TESTSV_KEY}}
        port: ${{ secrets.TESTSV_SSH_PORT }}
        script: | # 인스턴스 접속후 실행할 스크립트
          sudo docker version
          sudo docker rm -f kingwangjjang-be || true
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME_JS }}/kingwangjjang-be:test
          sudo docker run -d --name kingwangjjang-be \
          -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
          -e DB_HOST="${{ secrets.DB_HOST }}" \
          -e DB_NAME="${{ secrets.DB_NAME }}" \
          -e DB_USER="${{ secrets.DB_USER }}" \
          -e CHATGPT_API_KEY="${{ secrets.CHATGPT_API_KEY }}" \
          -e FTP_USERNAME="${{ secrets.FTP_USERNAME }}" \
          -e FTP_PASSWORD="${{ secrets.FTP_PASSWORD }}" \
          -e FTP_HOST="${{ secrets.FTP_HOST }}" \

          -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME_JS }}/kingwangjjang-be:${{ secrets.BE_DEV_VERSION }}


    # 도커 버전 출력
    # 실행중인 kingwangjjang컨테이너 제거
    # 도커허브에서 hwanju1596/kingwangjjang:version 이미지 pull
    # 새로운 컨테이너 실행,백그라운드에서(-d옵션), 환경변수 지정(-e옵션, 명령어 실행전 Secrets에서 해당 값 땡겨옴)

    #     docker exec kingwangjjang_migration python manage.py migrate
    #     docker stop kingwangjjang_migration
    #     docker rm kingwangjjang_migration
